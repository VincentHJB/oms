####环境配置####

#端口
server.port=8888

#默认环境
spring.profiles.active=dev
spring.application.name=order

#数据库连接池配置
spring.proxool.alias = order_pool
spring.proxool.driver = com.mysql.jdbc.Driver
spring.proxool.maximumConnectionCount = 200
spring.proxool.prototypeCount = 5
spring.proxool.simultaneousBuildThrottle = 100
spring.proxool.minimumConnectionCount = 10
spring.proxool.houseKeepingSleepTime = 10000
spring.proxool.houseKeepingTestSql = select CURRENT_DATE
spring.proxool.maximumActiveTime = 300000
spring.proxool.maximumConnectionLifetime = 3600000
spring.proxool.overloadWithoutRefusalLifetime = 6000

#jpa配置
spring.data.jpa.repositories.enabled=true
spring.jpa.database = MYSQL
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#返回json设置为下划线
spring.jackson.property-naming-strategy = CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES

#undertow
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=50
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true

#用户上传头像真实路径
#user.upload.avtar.base.dir=/opt/data/hotel
user.upload.avtar.base.dir=/users/vincent/desktop/oms/images/oms
#虚拟路径
user.upload.avtar.base.virt=/oms
#域名
#user.upload.avtar.domain = http://127.0.0.1:8888
#user.upload.avtar.domain=http://127.0.0.1:8888

multipart.maxFileSize = 2048KB
multipart.maxRequestSize = 2048KB


#AsyncHttpClient 常量配置
http.client.request_time_out=50000
http.client.connnection_time_out=50000
http.client.retry_times=3
http.client.future.request_time_out=50000